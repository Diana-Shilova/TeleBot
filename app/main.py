import logging
import telebot
import random
import signal
from telebot import types
from text_to_speech import text_to_voice, speech_to_text, question_answer, translation_text, emotion_analysis
from google_drive import upload_new_file, create_folder_for_new_user
import os

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
folder_path = "/all_info_for_drive"
sticker_dir = "/sticker"

if not os.path.exists(folder_path):
    os.makedirs(folder_path)
    logging.info('–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–∞–ø–∫–∞')

random_sentences = [
    '–û, —è –≤–∏–∂—É —Ç—ã —É–∂–µ –Ω–∞–ø—Ä–∞–≤–∏–ª –º–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —É–∂–µ –∑–∞–Ω–∏–º–∞—é—Å—å –µ–µ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π üåù',
    '–ê —Ç—ã —à—É—Å—Ç—Ä—ã–π ü§î, —É–∂–µ –ø–æ—à–µ–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å.',
    '–í–æ—Ç —ç—Ç–æ —Å–∫–æ—Ä–æ—Å—Ç—å, —É–∂–µ –∑–∞–Ω–∏–º–∞—é—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ üôÉ',
    '–ü—Ä–∏–Ω—è–ª, —É—à–µ–ª –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.',
    '–ü–æ–¥–∫–∏–Ω—É–ª –∂–µ —Ç—ã –º–Ω–µ —Ä–∞–±–æ—Ç–µ–Ω–∫—É, —É—à–µ–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.',
    '–Ø –æ—á–µ–Ω—å —Ä–∞–¥, —á—Ç–æ –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å ü´°. –ü–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–±—ã—Å—Ç—Ä–µ–µ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç.'
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)

# JustSpeech
TOKEN = '7318753618:AAFGEcDELj5DgHutedK7vKFX0xgRXXDvRUo'
bot = telebot.TeleBot(TOKEN)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
markup_func_ru = types.InlineKeyboardMarkup()
btn1_ru = types.InlineKeyboardButton('–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞—É–¥–∏–æ üìù', callback_data='ru —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è')
btn2_ru = types.InlineKeyboardButton('–û–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞ üîâ', callback_data='ru –æ–∑–≤—É—á–∫–∞')
btn3_ru = types.InlineKeyboardButton('–•–æ—á—É –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data='ru –≤–æ–ø—Ä–æ—Å')
btn4_ru = types.InlineKeyboardButton('–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ üíº', callback_data='ru –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞')
btn5_ru = types.InlineKeyboardButton('–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞', callback_data='ru —ç–º–æ—Ü–∏—è –≤ —Ç–µ–∫—Å—Ç–µ')
markup_func_ru.add(btn1_ru)
markup_func_ru.add(btn2_ru)
markup_func_ru.add(btn3_ru)
markup_func_ru.add(btn4_ru)
markup_func_ru.add(btn5_ru)

markup_audio = types.InlineKeyboardMarkup()
audio_without_timer = types.InlineKeyboardButton("–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞—É–¥–∏–æ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º", callback_data='audio_timer')
audio_with_timer = types.InlineKeyboardButton('–û–±—ã—á–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞—É–¥–∏–æ', callback_data='audio')
back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ üîô', callback_data='back')
markup_audio.add(audio_without_timer)
markup_audio.add(audio_with_timer)
markup_audio.add(back)

logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
call_type = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç–∏–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏


@bot.message_handler(commands=['start'])
def start(message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    folder_name = f'user_{message.from_user.id}'
    user_id = message.from_user.id
    create_folder_for_new_user(folder_name, user_id)
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ / —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    bot.send_sticker(message.chat.id, open(os.path.join(sticker_dir, 'sticker_5.webp'), 'rb'))

    bot.send_message(
        message.chat.id,
        "–í–æ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –ø—Ä–æ—Å—Ç–æ–π –≥–∞–π–¥ –¥–ª—è —Ç–µ–±—è, –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º üóí."
        "\n\n–£ –Ω–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ç–µ–±—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ç–µ–±–µ –ø–æ–º–æ—á—å –≤ –æ–±—ã—á–Ω–æ–π –∂–∏–∑–Ω–∏, –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º üéØ."
        "\n\n–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ üó£. –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ç–µ–±—è, –µ—Å–ª–∏ —Å–∞–º –Ω–µ —Ö–æ—á–µ—à—å –∑–∞–º–æ—Ä–∞—á–∏–≤–∞—Ç—å—Å—è –∏ –¥–µ–ª–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üëÄ."
        "\n\n–£ —Ç–µ–±—è —Ç–∞–∫–∂–µ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ üìë, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–∞ –≤ –º–æ–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å–ª—É—à–∞—Ç—å —á—å–µ-—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        "\n–ü—Ä–∏ —ç—Ç–æ–º —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ –æ–±—ã—á–Ω–æ–º –≤–∏–¥–µ –∏–ª–∏ —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–π —Ä–µ—á–∏ üò≥."
        "\n\n–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ üë•, –º—ã –º–æ–∂–µ–º –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å —Ç–∞–∫–∏—Ö —è–∑—ã–∫–æ–≤ –∫–∞–∫: –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –∫–∏—Ç–∞–π—Å–∫–∏–π, –∏—Å–ø–∞–Ω—Å–∫–∏–π, –ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π, –Ω–æ—Ä–≤–µ–∂—Å–∫–∏–π, —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∏ —ç—Ç–æ –Ω–µ –≤—Å–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ —è–∑—ã–∫–∏ - –∏—Ö –±–æ–ª–µ–µ 30 –Ω–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π, –∞ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–≤–æ–¥ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π."
        "\n–≠—Ç–æ –º–æ–≥–ª–æ –±—ã —Ç–µ–±–µ –ø–æ–º–æ—á—å –≤–æ –≤—Ä–µ–º—è –æ–±—â–µ–Ω–∏—è —Å –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–∞–º–∏, –µ—Å–ª–∏ —Ç—ã –ø–ª–æ—Ö–æ –∑–Ω–∞–µ—à—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫."
        "\n\n–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ üíÅ - –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤ —Ç–µ–∫—Å—Ç–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫ –æ–Ω —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ–∫—Ä–∞—à–µ–Ω."
        "\n\n–ü–æ—á–µ–º—É –±—ã –Ω–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ—á–µ–Ω—å —Ö–æ—á–µ—Ç—Å—è‚ùì–ó–¥–µ—Å—å —Ç—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∫–∞–∫–æ–π —Ö–æ—Ç–µ–ª –±—ã.",
        reply_markup=markup_func_ru,
        parse_mode='HTML'
    )


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    logging.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ {call.data} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {call.from_user.id}")
    try:
        if call.data == 'ru —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è':
            bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:', reply_markup=markup_audio)
        elif call.data == 'ru –æ–∑–≤—É—á–∫–∞':
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ, –Ω–∞—á–∏–Ω–∞—è —Å –∫–æ–º–∞–Ω–¥—ã /speech, —Ç–æ–ª—å–∫–æ –±—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω. –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª–∏–Ω–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 8 –∑–Ω–∞–∫–æ–≤.")
        elif call.data == 'ru —ç–º–æ—Ü–∏—è –≤ —Ç–µ–∫—Å—Ç–µ':
            bot.send_message(call.message.chat.id, "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∑–∞ —ç–º–æ—Ü–∏—è –≤ —Ç–µ–∫—Å—Ç–µ —Ç–æ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /emotion.")
        elif call.data == 'ru –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞':
            bot.send_message(call.message.chat.id, "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å –ª—é–±–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π–∫–∏–π —Ç–æ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /mul-en."
                                                   "\n\n"
                                                   "–ï—Å–ª–∏ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ —Å –ª—é–±–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—É /mul-ru.")
        elif call.data == 'audio_timer' or call.data == 'audio':
            bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª.")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º call_type –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            global call_type
            call_type = call.data
        elif call.data == 'ru –≤–æ–ø—Ä–æ—Å':
            bot.send_message(call.message.chat.id, "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞—á–Ω–∏ –µ–≥–æ —Å –∫–æ–º–∞–Ω–¥—ã /question."),
        elif call.data == 'back':
            bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=markup_func_ru)

    except Exception as e:
        logging.info(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ {e} –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º {call.message.message_id}")
        bot.send_message(call.message.chat.id,
                         f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚ö†Ô∏è: {e}.\n\n"
                         f"–ï—Å–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å —ç—Ç—É –æ—à–∏–±–∫—É, —Ç–æ —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @vaalberit")


@bot.message_handler(content_types=['voice', 'audio'])
def get_speech_to_text_message(message):
    global call_type
    os.makedirs(folder_path, exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    msg_id = message.message_id

    call_type_text = call_type
    logging.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø call_type_text: {call_type}")

    if call_type is None:
        logging.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
        bot.send_message(message.chat.id,
                         f"–ö–∞–∂–µ—Ç—Å—è —Ç—ã –∑–∞–±—ã–ª —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞",
                         reply_markup=markup_func_ru)

    elif message.content_type in ['voice', 'audio']:
        logging.info(f"–ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, id_{message.message_id}")

        try:
            file = bot.get_file(
                message.voice.file_id if message.content_type == 'voice' else message.audio.file_id
            )
            bot.send_message(message.from_user.id, random.choice(random_sentences))

            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
            bytes = bot.download_file(file.file_path)
            ogg_file_path = os.path.join(folder_path, 'SpeechToText.ogg')
            with open(ogg_file_path, 'wb') as new_file:
                new_file.write(bytes)

            logging.info(f"–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è id_{message.message_id} –ø–æ –º–æ–¥–µ–ª–∏ speech_to_text")

            text = speech_to_text('SpeechToText', call_type=call_type_text)

            logging.info(f"–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            upload_new_file(ogg_file_path, message.from_user.id, function='speech_to_text')
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id} –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}")

            with open(os.path.join(folder_path, "TranscriptMessage.txt"), "w") as file:
                file.write(str(text))

            upload_new_file(os.path.join(folder_path, "TranscriptMessage.txt"), message.from_user.id, function='speech_to_text')
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –Ω–∞ —Å–µ—Ä–≤–µ—Ä")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if not text or (isinstance(text, list) and len(text) == 0):
                logging.warning(f"–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è id_{message.message_id}")
                bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ—Ñ–∞–π–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            else:
                if isinstance(text, list):
                    text = ' '.join(text)
                bot.reply_to(message, text)

            bot.send_message(message.chat.id, "–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=markup_func_ru)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            bot.send_message(message.chat.id,
                             f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚ö†Ô∏è: {e}.\n\n"
                             f"–ï—Å–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å —ç—Ç—É –æ—à–∏–±–∫—É, —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @vaalberit")


@bot.message_handler(
    func=lambda message: message.text.startswith('/') and message.text.split()[0] not in ['/start'])
def handle_all_commands(message):
    command, *args = message.text.split(maxsplit=1)
    text = args[0] if args else ""  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if not text:
        bot.reply_to(message, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã {command}.")
        return

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /speech
        if command == '/speech':
            file_path = os.path.join(folder_path, "SpeechToText.txt")
            logging.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID_{message.from_user.id}, ID_message_{message.message_id}: {text}")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
            with open(file_path, "w") as file:
                file.write(text)
            upload_new_file(file_path, message.from_user.id, function='text_to_speech')
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID_{message.from_user.id} –Ω–∞ —Å–µ—Ä–≤–µ—Ä")

            # –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            text_to_voice(text)
            with open(os.path.join(folder_path, 'TextToSpeech.wav'), 'rb') as f:
                bot.send_audio(chat_id=message.chat.id, reply_to_message_id=message.message_id, audio=f)
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–∑–≤—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID_{message.from_user.id}")

            # –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            audio_file_path = os.path.join(folder_path, 'TextToSpeech.wav')
            upload_new_file(audio_file_path, message.from_user.id, function='text_to_speech')
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª —Å –∞—É–¥–∏–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID_{message.from_user.id} –Ω–∞ —Å–µ—Ä–≤–µ—Ä")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /question
        elif command == '/question':
            file_path = os.path.join(folder_path, "Question.txt")
            logging.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID_{message.from_user.id}, ID_message_{message.message_id}: {text}")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
            with open(file_path, "w") as file:
                file.write(text)
            upload_new_file(file_path, message.from_user.id, function='questions')
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –Ω–∞ —Å–µ—Ä–≤–µ—Ä")

            # –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
            answer = question_answer(text)
            bot.reply_to(message, answer)
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id} –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.message_id}")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            answer_file_path = os.path.join(folder_path, "Answer.txt")
            with open(answer_file_path, "w") as file:
                file.write(str(answer))
            upload_new_file(answer_file_path, message.from_user.id, function='questions')
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –Ω–∞ —Å–µ—Ä–≤–µ—Ä")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mul-en
        elif command == '/mul-en':
            file_path = os.path.join(folder_path, "TextMulEn.txt")
            logging.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ ENG –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, id_{message.message_id}: {text}")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥
            with open(file_path, "w") as file:
                file.write(text)
            upload_new_file(file_path, message.from_user.id, function='translate_text')
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª c —Ç–µ–∫—Å—Ç–æ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –Ω–∞ —Å–µ—Ä–≤–µ—Ä")

            answer = translation_text(text, 'mul-en')
            bot.reply_to(message, answer)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
            answer_file_path = os.path.join(folder_path, "TranslateMulEn.txt")
            with open(answer_file_path, "w") as file:
                file.write(str(answer))
            upload_new_file(answer_file_path, message.from_user.id, function='translate_text')
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º ENG –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –Ω–∞ —Å–µ—Ä–≤–µ—Ä")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mul-ru
        elif command == '/mul-ru':
            file_path = os.path.join(folder_path, "TextMulRu.txt")
            logging.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ RU –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, id_{message.message_id}: {text}")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥
            with open(file_path, "w") as file:
                file.write(text)
            upload_new_file(file_path, message.from_user.id, function='translate_text')
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª c —Ç–µ–∫—Å—Ç–æ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –Ω–∞ —Å–µ—Ä–≤–µ—Ä")

            answer = translation_text(text, 'mul-ru')
            bot.reply_to(message, answer)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
            answer_file_path = os.path.join(folder_path, "TranslateMulRu.txt")
            with open(answer_file_path, "w") as file:
                file.write(str(answer))
            upload_new_file(answer_file_path, message.from_user.id, function='translate_text')
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º RU –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –Ω–∞ —Å–µ—Ä–≤–µ—Ä")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /emotion
        elif command == '/emotion':
            file_path = os.path.join(folder_path, "Text.txt")
            logging.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —ç–º–æ—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, id_{message.message_id}: {text}")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
            with open(file_path, "w") as file:
                file.write(text)
            upload_new_file(file_path, message.from_user.id, function='emotions')
            logging.info(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, id_{message.message_id}: {text}")

            answer = emotion_analysis(text)
            bot.reply_to(message, answer)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
            answer_file_path = os.path.join(folder_path, "EmotionInText.txt")
            with open(answer_file_path, "w") as file:
                file.write(str(answer))
            upload_new_file(answer_file_path, message.from_user.id, function='emotions')
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, id_{message.message_id}: {text}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /restart
        elif command == '/restart':
            bot.send_sticker(message.chat.id, open(os.path.join(sticker_dir,'sticker_4.webp'), 'rb'))
            bot.send_message(message.chat.id, "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            os.kill(os.getpid(), signal.SIGINT)
            bot.send_message(message.chat.id,
                             "–ö–∞–∂–µ—Ç—Å—è —Ç—ã –∫–æ–µ-—á—Ç–æ –∑–∞–±—ã–ª. –°–¥–µ–ª–∞–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–æ—Ä üëá", reply_markup=markup_func_ru)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        bot.send_message(message.chat.id, "–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=markup_func_ru)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
        bot.send_message(message.chat.id,
                         f"–•—å—é—Å—Ç–æ–Ω, —É –Ω–∞—Å –æ—à–∏–±–∫–∞ ‚ö†Ô∏è: {e}.\n\n"
                         f"–ï—Å–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å —ç—Ç—É –æ—à–∏–±–∫—É, —Ç–æ –∑–Ω–∞–π —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @vaalberit —É–∂–µ –µ–µ —Ä–µ—à–∞–µ—Ç.")
        bot.send_message(message.chat.id, "–ò–∑-–∑–∞ –ø–æ—è–≤–∏–≤—à–µ–π—Å—è –æ—à–∏–±–∫–∏ —è —Å–¥–µ–ª–∞—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã, –ø–æ–∫–∞ –æ—à–∏–±–∫—É —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä...")
        os.kill(os.getpid(), signal.SIGINT)


@bot.message_handler(content_types=['text'])
def give_a_choise(message):
    bot.send_message(message.chat.id, "–Ø –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ —Å –Ω–∏–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å üëá", reply_markup=markup_func_ru)


if __name__ == '__main__':
    try:
        logging.info("–ó–∞–ø—É—Å–∫ bot.polling()")
        bot.polling(non_stop=True)
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
